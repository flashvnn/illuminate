<?php
/**
 * @file
 * Laravel components integration with Drupal.
 */

/**
 * Implements hook_init().
 */
function illuminate_init() {
  illuminate_load_instance();
}
/**
 * Implements hook_page_delivery_callback_alter().
 */
function illuminate_page_delivery_callback_alter(&$callback) {
  if ($callback == 'drupal_deliver_html_page') {
    $callback = 'illuminate_deliver_html_page';
  }
}

function illuminate_addPSR0($prefix, $paths, $prepend = false) {
  if (illuminate_load_instance()) {
   $loader = ComposerAutoloaderInitComposerManager::getLoader();
   $loader->add($prefix, $paths, $prepend);
 }
}
/**
 * Load laravel application instance.
 */
function illuminate_load_instance(){
  static $loaded = false;
  if(!$loaded){
    composer_manager_register_autoloader();
    if(class_exists('\\Drupal\\Laravel\\Application')){
      $app = new \Drupal\Laravel\Application(__DIR__);
      $app['path.storage'] = variable_get('file_public_path', conf_path() . '/files');
      $app->startExceptionHandling();
      $app->boot();
      $loaded = TRUE;
    }else{
      illuminate_warning();
    }
  }

  return $loaded;
}

/**
 * Show warning message.
 */
function illuminate_warning(){
    if(!drupal_is_cli()){
      $message = t('Illuminate components can not load, please install require components with Composer and Composer Manager.');
      drupal_set_message($message, 'warning');
    }
}

function illuminate_modules($base_module = 'laravel', $config_file = ''){
  $key = "illuminatemodules:{$base_module}:{$config_file}";
  $minutes = 60*24*365;

  return Cache::remember($key, $minutes, function() use($base_module, $config_file){
    $module_enabled = system_list('module_enabled');

    return with(new \Drupal\ZM\Helper\ModulesFetcher($base_module, $config_file))
            ->fetch($module_enabled);;
  });
}


/**
 * Get real path with token.
 *
 * @param  string $file
 *   File path. Use with {module-name} {theme-name} {theme}.
 *
 * @return string
 *   Real path.
 */
function illuminate_realpath($file){
  $file = trim($file);
  if (strpos($file, '{theme}') !== FALSE) {
    $theme_default = $GLOBALS['conf']['theme_default'];
    $theme_path = drupal_get_path('theme', $theme_default);
    $file = str_replace('{theme}', $theme_path, $file);
  }

  $matches = array();
  $types = array('module', 'theme', 'library');

  foreach ($types as $type) {
    $pattern = '/\{' . $type . '-(.+)\}/';

    preg_match($pattern, $file, $matches);

    if($type == "library"){
      if (count($matches) > 1 && ($path = libraries_get_path($matches[1])) != '') {
        $file = str_replace($matches[0], $path, $file);
        return $file;
      }
    }else{
      if (count($matches) > 1 && ($path = drupal_get_path($type, $matches[1])) != '') {
        $file = str_replace($matches[0], $path, $file);
        return $file;
      }
    }
  }

  return $file;
}

/**
 * Implements hook_block_info().
 */
function illuminate_block_info() {
  if(illuminate_load_instance()){
    return with(new \Drupal\ZM\Hook\BlockInfo())->import();
  }

  return array();
}

/**
 * Implements hook_block_view().
 */
function illuminate_block_view($delta = '') {
  return with(new \Drupal\ZM\Hook\BlockView($delta))->view();
}

function illuminate_deliver_html_page($page_callback_result) {
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // @todo: Break these up into separate functions?
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        // Print a 404 page.
        drupal_add_http_header('Status', '404 Not Found');

        watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

        // Check for and return a fast 404 page if configured.
        drupal_fast_404();

        // Keep old path for reference, and to allow forms to redirect to it.
        if (!isset($_GET['destination'])) {
          $_GET['destination'] = $_GET['q'];
        }

        $path = drupal_get_normal_path(variable_get('site_404', ''));
        if ($path && $path != $_GET['q']) {
          // Custom 404 handler. Set the active item in case there are tabs to
          // display, or other dependencies on the path.
          menu_set_active_item($path);
          $return = menu_execute_active_handler($path, FALSE);
        }

        if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
          // Standard 404 handler.
          drupal_set_title(t('Page not found'));
          $return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
        }

        drupal_set_page_content($return);
        $page = element_info('page');
        print drupal_render_page($page);
        break;

      case MENU_ACCESS_DENIED:
        // Print a 403 page.
        drupal_add_http_header('Status', '403 Forbidden');
        watchdog('access denied', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

        // Keep old path for reference, and to allow forms to redirect to it.
        if (!isset($_GET['destination'])) {
          $_GET['destination'] = $_GET['q'];
        }

        $path = drupal_get_normal_path(variable_get('site_403', ''));
        if ($path && $path != $_GET['q']) {
          // Custom 403 handler. Set the active item in case there are tabs to
          // display or other dependencies on the path.
          menu_set_active_item($path);
          $return = menu_execute_active_handler($path, FALSE);
        }

        if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
          // Standard 403 handler.
          drupal_set_title(t('Access denied'));
          $return = t('You are not authorized to access this page.');
        }

        print drupal_render_page($return);
        break;

      case MENU_SITE_OFFLINE:
        // Print a 503 page.
        drupal_maintenance_theme();
        drupal_add_http_header('Status', '503 Service unavailable');
        drupal_set_title(t('Site under maintenance'));
        print theme('maintenance_page', array('content' => filter_xss_admin(variable_get('maintenance_mode_message',
          t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => variable_get('site_name', 'Drupal')))))));
        break;
    }
  }
  elseif (isset($page_callback_result)) {
    if ($page_callback_result instanceof Symfony\Component\HttpFoundation\Response) {
      $page_callback_result->send();
      illuminate_drupal_page_footer();
      exit();
    }
    else {
      if ($page_callback_result instanceof Illuminate\View\View) {
        $page_callback_result = $page_callback_result->render();
      }
      print drupal_render_page($page_callback_result);
    }
  }

  // Perform end-of-request tasks.
  drupal_page_footer();
}

function illuminate_controller($controller, $action, $params = NULL) {
  return App::make($controller)->{$action}($params);
}

function illuminate_drupal_page_footer() {
  global $user;

  module_invoke_all('exit');

  // Commit the user session, if needed.
  drupal_session_commit();

  if (variable_get('cache', 0) && ($cache = drupal_page_set_cache())) {
    drupal_serve_page_from_cache($cache);
  }

  _registry_check_code(REGISTRY_WRITE_LOOKUP_CACHE);
  drupal_cache_system_paths();
  module_implements_write_cache();
  system_run_automated_cron();
}
